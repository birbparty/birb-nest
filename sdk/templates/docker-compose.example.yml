# Birb-Nest SDK Docker Compose Template
# This is a production-ready template for deploying applications that use the Birb-Nest SDK

version: '3.8'

services:
  # Your application that uses the Birb-Nest SDK
  app:
    image: ${APP_IMAGE:-your-app:latest}
    container_name: ${APP_NAME:-my-app}
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      # Birb-Nest SDK Configuration
      - BIRB_NEST_URL=http://birb-nest-api:8080
      - BIRB_NEST_TIMEOUT=${BIRB_NEST_TIMEOUT:-30s}
      - BIRB_NEST_MAX_RETRIES=${BIRB_NEST_MAX_RETRIES:-3}
      
      # Connection Pool Settings
      - BIRB_NEST_MAX_IDLE_CONNS=${MAX_IDLE_CONNS:-100}
      - BIRB_NEST_MAX_CONNS_PER_HOST=${MAX_CONNS_PER_HOST:-10}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      
      # Application specific
      - APP_ENV=${APP_ENV:-production}
    depends_on:
      birb-nest-api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./logs/app:/var/log/app
    networks:
      - birb-net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Birb-Nest API Service
  birb-nest-api:
    image: birbparty/birb-nest:${BIRB_NEST_VERSION:-latest}
    container_name: birb-nest-api
    ports:
      - "8080:8080"
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      - DATABASE_URL=postgres://birb_user:${POSTGRES_PASSWORD:-changeme}@postgres:5432/birb_nest
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=${METRICS_PORT:-9090}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./logs/birb-nest:/var/log/birb-nest
    networks:
      - birb-net
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: birb-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-changeme}
      --maxmemory ${REDIS_MAX_MEMORY:-2gb}
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-changeme}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - birb-net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: birb-postgres
    environment:
      - POSTGRES_DB=birb_nest
      - POSTGRES_USER=birb_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups/postgres:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U birb_user -d birb_nest"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - birb-net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

networks:
  birb-net:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
