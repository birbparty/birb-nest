# Build stage
FROM golang:1.23-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git make

# Set working directory
WORKDIR /build

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the binary
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o worker ./cmd/worker

# Development stage
FROM golang:1.23-alpine AS development

# Install air for hot reload
RUN go install github.com/cosmtrek/air@latest

# Install delve for debugging
RUN go install github.com/go-delve/delve/cmd/dlv@latest

# Set working directory
WORKDIR /app

# Copy air config
COPY .air.toml ./

# Expose debug port
EXPOSE 2346

# Run with air for hot reload
CMD ["air", "-c", ".air.toml"]

# Production stage
FROM alpine:3.19 AS production

# Install runtime dependencies
RUN apk add --no-cache ca-certificates tzdata

# Create non-root user
RUN adduser -D -g '' appuser

# Set working directory
WORKDIR /app

# Copy binary from builder
COPY --from=builder /build/worker .

# Change ownership
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# No exposed ports for worker

# Health check - worker doesn't expose HTTP, so we check process
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD pgrep worker || exit 1

# Run the binary
CMD ["./worker"]
